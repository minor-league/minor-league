---

_meta:
  type: "config"
  config_version: 2

config:
  dynamic:
    http:
      anonymous_auth_enabled: false
    authc: # Authentication
      basic_internal_auth_domain:
        description: "Authenticate via HTTP Basic against internal users database"
        http_enabled: false # allow HTTP and HTTPS
        transport_enabled: true
        order: 4
        http_authenticator:
          type: basic
          challenge: true
        authentication_backend:
          type: intern
      # jwt_auth_domain:
      #   description: "Authenticate via Json Web Token"
      #   http_enabled: false
      #   transport_enabled: false
      #   order: 0
      #   http_authenticator:
      #     type: jwt
      #     challenge: false
      #     config:
      #       signing_key: "base64 encoded HMAC key or public RSA/ECDSA pem key"
      #       jwt_header: "Authorization"
      #       jwt_url_parameter: null
      #       roles_key: null
      #       subject_key: null
      #   authentication_backend:
      #     type: noop
      clientcert_auth_domain:
        description: "Authenticate via SSL client certificates"
        http_enabled: false # Allow HTTP and HTTPS
        transport_enabled: true
        order: 1
        http_authenticator:
          type: clientcert
          config:
            username_attribute: cn #optional, if omitted DN becomes username
          challenge: false
        authentication_backend:
          type: noop
      # ldap:
      #   description: "Authenticate via LDAP or Active Directory"
      #   http_enabled: false
      #   transport_enabled: false
      #   order: 5
      #   http_authenticator:
      #     type: basic
      #     challenge: false
      #   authentication_backend:
      #     # LDAP authentication backend (authenticate users against a LDAP or Active Directory)
      #     type: ldap
      #     config:
      #       # enable ldaps
      #       enable_ssl: false
      #       # enable start tls, enable_ssl should be false
      #       enable_start_tls: false
      #       # send client certificate
      #       enable_ssl_client_auth: false
      #       # verify ldap hostname
      #       verify_hostnames: true
      #       hosts:
      #       - localhost:8389
      #       bind_dn: null
      #       password: null
      #       userbase: 'ou=people,dc=example,dc=com'
      #       # Filter to search for users (currently in the whole subtree beneath userbase)
      #       # {0} is substituted with the username
      #       usersearch: '(sAMAccountName={0})'
      #       # Use this attribute from the user as username (if not set then DN is used)
      #       username_attribute: null
    authz: # Authorization
      roles_from_another_ldap:
        description: "Authorize via another Active Directory"
        http_enabled: false
        transport_enabled: false
        authorization_backend:
          type: noop
          #config goes here ...
  #    auth_failure_listeners:
  #      ip_rate_limiting:
  #        type: ip
  #        allowed_tries: 10
  #        time_window_seconds: 3600
  #        block_expiry_seconds: 600
  #        max_blocked_clients: 100000
  #        max_tracked_clients: 100000
  #      internal_authentication_backend_limiting:
  #        type: username
  #        authentication_backend: intern
  #        allowed_tries: 10
  #        time_window_seconds: 3600
  #        block_expiry_seconds: 600
  #        max_blocked_clients: 100000
  #        max_tracked_clients: 100000
# This is the main OpenSearch Security configuration file where authentication
# and authorization is defined.
# https://github.com/opensearch-project/security/blob/main/securityconfig/config.yml
# You need to configure at least one authentication domain in the authc of this file.
# An authentication domain is responsible for extracting the user credentials from
# the request and for validating them against an authentication backend like Active Directory for example.
#
# Note: If you define more than one HTTP authenticators make sure to put non-challenging authenticators like "proxy" or "clientcert"
# first and the challenging one last.
# Because it's not possible to challenge a client with two different authentication methods (for example
# Kerberos and Basic) only one can have the challenge flag set to true. You can cope with this situation
# by using pre-authentication, e.g. sending a HTTP Basic authentication header in the request.
#
# Default value of the challenge flag is true.
#
#
# HTTP
#   basic (challenging)
#   proxy (not challenging, needs xff)
#   kerberos (challenging)
#   clientcert (not challenging, needs https)
#   jwt (not challenging)
#   host (not challenging) #DEPRECATED, will be removed in a future version.
#                          host based authentication is configurable in roles_mapping

# Authc
#   internal
#   noop
#   ldap

# Authz
#   ldap
#   noop



